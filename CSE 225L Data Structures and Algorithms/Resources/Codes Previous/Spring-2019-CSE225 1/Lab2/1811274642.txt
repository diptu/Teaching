Name	: MD. Nasir Uddin
ID	: 1811274642
Section	: 01

Task 01,02,04

#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

template <class A>

class dynArr
{
private:
    A *data;
    int size;

public:
    dynArr();
    dynArr(int);
    ~dynArr();
    void allocate(int);
    void setValue(int, A);
    int getValue(int);
};
#endif // DYNARR_H_INCLUDED






#include "dynarr.h"
#include <iostream>
using namespace std;

template <class A>
dynArr<A>::dynArr()

{
    data = NULL;
    size=0;
}

template <class A>
dynArr<A>::dynArr(int s)

{
    data=new int [s];
    size=s;
}

template <class A>
dynArr<A>::~dynArr()

{
    delete [] data;
}

template <class A>
void dynArr<A>::allocate(int s)

{
    data=new int [s];
    size=s;
}

template <class A>
int dynArr<A>::getValue(int index)

{
    return data[index];
}

template <class A>
void dynArr<A>::setValue(int index, A value)

{
    data[index]=value;
}







#include "dynArr.cpp"
#include <iostream>
using namespace std;

int main()
{
    dynArr <int> a;
    dynArr <int> b(5);

    int val;

    for(int i=0;i<5;i++)
    {
        cout<<"Enter Values of the Array: "<<endl;
        cin>>val;

        b.setValue(i,val);
    }

    cout<<"The Values are "<<endl;

    for(int i=0;i<5;i++)
    {
        cout<<b.getValue(i)<<endl;
    }
}




Task 03


#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

class dynArr
{
private:
    int **data;
    int row,column;

public:
    dynArr();
    dynArr(int,int);
    ~dynArr();
    void allocate(int,int);
    void setValue(int, int,int);
    int getValue(int,int);
};
#endif // DYNARR_H_INCLUDED





#include "dynarr.h"
#include <iostream>
using namespace std;

dynArr::dynArr()

{
    data = NULL;
    row=0;
    column=0;
}

dynArr::dynArr(int row,int column)

{
    data = new int*[row];
    for(int i=0; i<row; i++)
    {
        data[i]=new int[column];
    }
}

dynArr::~dynArr()

{
    for(int d=0; d<row; d++)
    {
        delete []data[d];
        delete []data;
    }
}

void dynArr::allocate(int row,int column)

{
    data = new int*[row];
    for(int i=0; i<row; i++)
    {
        data[i]=new int[column];
    }
}

int dynArr::getValue(int row,int column)

{
    return data[row][column];
}

void dynArr::setValue(int row,int column, int value)

{
    data[row][column]=value;
}






#include "dynArr.h"
#include <iostream>
using namespace std;

int main()
{
    int r,c;

    cout<<"Enter Rows Number: "<<endl;
    cin>>r;

    cout<<"Enter Columns Number: "<<endl;
    cin>>c;

    dynArr *w=new dynArr(r,c);

    int val;

    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            cout<<"Enter Elements: "<<endl;
            cin>>val;

            w->setValue(i,j,val);

        }
    }

    cout<<endl;

    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            cout<<w->getValue(i,j)<<" ";

        }
        cout<<endl;
    }

}

